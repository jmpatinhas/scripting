-- Declare variables
DECLARE @EXEC_ID UNIQUEIDENTIFIER = 'YOUR_EXEC_ID_HERE'; -- Replace with actual execution ID
DECLARE @THRESH DECIMAL(10,4) = -0.10; -- 10% loss threshold
DECLARE @SMALL_PORTFOLIO DECIMAL(15,2) = 100000; -- $100K
DECLARE @LARGE_PORTFOLIO DECIMAL(15,2) = 1000000; -- $1M

-- =================================================================
-- QUERY 1: BROKERAGE SUMMARY DASHBOARD
-- One row per brokerage with key KPIs
-- =================================================================

SELECT 
    s.TIDES_BRKR_NAME as BROKERAGE_NAME,
    
    -- Performance Metrics
    COUNT(*) as TOTAL_PORTFOLIOS,
    SUM(s.UPDT_TOTAL_MARKET_VALUE) as TOTAL_MARKET_VALUE,
    SUM(s.DELTA) as OVERALL_DELTA,
    ROUND(AVG(s.DELTA), 2) as AVG_PORTFOLIO_PERFORMANCE,
    ROUND(STDEV(s.DELTA), 2) as PERFORMANCE_CONSISTENCY,
    ROUND((SUM(s.DELTA) / NULLIF(SUM(s.TIDES_TOTAL_MARKET_VALUE), 0)) * 100, 2) as OVERALL_RETURN_PCT,
    
    -- Risk Analysis
    SUM(CASE WHEN s.DELTA < (@THRESH * s.TIDES_TOTAL_MARKET_VALUE) THEN 1 ELSE 0 END) as UNDERPERFORMING_PORTFOLIOS,
    MIN(s.DELTA) as WORST_PORTFOLIO_LOSS,
    MAX(s.DELTA) as BEST_PORTFOLIO_GAIN,
    
    -- Portfolio Distribution
    SUM(CASE WHEN s.UPDT_TOTAL_MARKET_VALUE < @SMALL_PORTFOLIO THEN 1 ELSE 0 END) as SMALL_PORTFOLIOS,
    SUM(CASE WHEN s.UPDT_TOTAL_MARKET_VALUE >= @SMALL_PORTFOLIO AND s.UPDT_TOTAL_MARKET_VALUE < @LARGE_PORTFOLIO THEN 1 ELSE 0 END) as MEDIUM_PORTFOLIOS,
    SUM(CASE WHEN s.UPDT_TOTAL_MARKET_VALUE >= @LARGE_PORTFOLIO THEN 1 ELSE 0 END) as LARGE_PORTFOLIOS,
    ROUND(AVG(s.UPDT_TOTAL_MARKET_VALUE), 0) as AVG_PORTFOLIO_SIZE,
    
    SUM(CASE WHEN (s.TIDES_CASH_POS / NULLIF(s.UPDT_TOTAL_MARKET_VALUE, 0)) > 0.20 THEN 1 ELSE 0 END) as CASH_HEAVY_PORTFOLIOS,
    
    -- Data Quality
    brok_stats.FAILED_UPDATES_TOTAL,
    brok_stats.TOTAL_INVESTMENTS,
    ROUND((1.0 - (CAST(brok_stats.FAILED_UPDATES_TOTAL AS FLOAT) / NULLIF(brok_stats.TOTAL_INVESTMENTS, 0))) * 100, 1) as DATA_QUALITY_SCORE,
    brok_stats.STALE_DATA_PORTFOLIOS,
    ROUND(AVG(brok_stats.INVESTMENTS_PER_PORTFOLIO), 1) as AVG_DIVERSIFICATION,
    
    -- Market Exposure
    brok_stats.UNIQUE_SYMBOLS_COUNT

FROM WLF_001_BCM_CASE_SUMMARY s

-- Get brokerage-level statistics
OUTER APPLY (
    SELECT 
        COUNT(DISTINCT i.INV_SYMBOL) as UNIQUE_SYMBOLS_COUNT,
        SUM(CASE WHEN i.STATUS != 'SUCCESS' OR i.UPDT_CURRENT_PRICE IS NULL THEN 1 ELSE 0 END) as FAILED_UPDATES_TOTAL,
        COUNT(*) as TOTAL_INVESTMENTS,
        SUM(CASE WHEN DATEDIFF(day, s2.TIDES_STMT_END_DATE, GETDATE()) > 30 THEN 1 ELSE 0 END) as STALE_DATA_PORTFOLIOS,
        AVG(CAST(port_inv_count.INV_COUNT AS FLOAT)) as INVESTMENTS_PER_PORTFOLIO
    FROM WLF_001_BCM_CASE_INVESTMENTS i
    INNER JOIN WLF_001_BCM_CASE_SUMMARY s2 ON i.CASE_ID = s2.CASE_ID
    CROSS APPLY (
        SELECT COUNT(*) as INV_COUNT 
        FROM WLF_001_BCM_CASE_INVESTMENTS i2 
        WHERE i2.CASE_ID = s2.CASE_ID
    ) port_inv_count
    WHERE s2.TIDES_BRKR_NAME = s.TIDES_BRKR_NAME AND s2.EXEC_ID = @EXEC_ID
) brok_stats

WHERE s.EXEC_ID = @EXEC_ID

GROUP BY s.TIDES_BRKR_NAME, brok_stats.FAILED_UPDATES_TOTAL, brok_stats.TOTAL_INVESTMENTS, 
         brok_stats.STALE_DATA_PORTFOLIOS, brok_stats.UNIQUE_SYMBOLS_COUNT

ORDER BY TOTAL_MARKET_VALUE DESC;

-- =================================================================
-- QUERY 2: BROKERAGE RISK DETAIL
-- Focus on underperforming portfolios by brokerage
-- =================================================================

SELECT 
    s.TIDES_BRKR_NAME as BROKERAGE_NAME,
    COUNT(*) as TOTAL_UNDERPERFORMING,
    SUM(s.DELTA) as TOTAL_LOSSES,
    ROUND(AVG(s.DELTA), 2) as AVG_LOSS_PER_PORTFOLIO,
    MIN(s.DELTA) as WORST_SINGLE_LOSS,
    
    -- Concentration risk in underperforming portfolios
    SUM(CASE WHEN conc_risk.IS_CONCENTRATED = 'YES' THEN 1 ELSE 0 END) as CONCENTRATED_PORTFOLIOS,
    
    -- Most common problem investments
    prob_inv.MOST_PROBLEMATIC_SYMBOL,
    prob_inv.PROBLEM_SYMBOL_IMPACT,
    prob_inv.PORTFOLIOS_WITH_PROBLEM_SYMBOL,
    
    -- Recovery potential
    SUM(recovery.RECOVERY_POTENTIAL) as TOTAL_RECOVERY_POTENTIAL,
    ROUND(AVG(recovery.RECOVERY_POTENTIAL), 2) as AVG_RECOVERY_POTENTIAL

FROM WLF_001_BCM_CASE_SUMMARY s

-- Check concentration risk
OUTER APPLY (
    SELECT TOP 1
        CASE WHEN (i.UPDT_MRKT_VALUE / NULLIF(s.UPDT_TOTAL_MARKET_VALUE, 0)) > 0.50 THEN 'YES' ELSE 'NO' END as IS_CONCENTRATED
    FROM WLF_001_BCM_CASE_INVESTMENTS i
    WHERE i.CASE_ID = s.CASE_ID
    ORDER BY i.UPDT_MRKT_VALUE DESC
) conc_risk

-- Get most problematic investment per brokerage
OUTER APPLY (
    SELECT TOP 1
        i.INV_SYMBOL as MOST_PROBLEMATIC_SYMBOL,
        SUM(i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) as PROBLEM_SYMBOL_IMPACT,
        COUNT(DISTINCT s2.CASE_ID) as PORTFOLIOS_WITH_PROBLEM_SYMBOL
    FROM WLF_001_BCM_CASE_INVESTMENTS i
    INNER JOIN WLF_001_BCM_CASE_SUMMARY s2 ON i.CASE_ID = s2.CASE_ID
    WHERE s2.TIDES_BRKR_NAME = s.TIDES_BRKR_NAME 
      AND s2.EXEC_ID = @EXEC_ID
      AND s2.DELTA < (@THRESH * s2.TIDES_TOTAL_MARKET_VALUE)
      AND (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) < 0
    GROUP BY i.INV_SYMBOL
    ORDER BY SUM(i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) ASC
) prob_inv

-- Calculate recovery potential
OUTER APPLY (
    SELECT 
        SUM(CASE WHEN (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) > 0 
                 THEN (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) 
                 ELSE 0 END) as RECOVERY_POTENTIAL
    FROM WLF_001_BCM_CASE_INVESTMENTS i
    WHERE i.CASE_ID = s.CASE_ID
) recovery

WHERE s.EXEC_ID = @EXEC_ID
  AND s.DELTA < (@THRESH * s.TIDES_TOTAL_MARKET_VALUE)

GROUP BY s.TIDES_BRKR_NAME, prob_inv.MOST_PROBLEMATIC_SYMBOL, 
         prob_inv.PROBLEM_SYMBOL_IMPACT, prob_inv.PORTFOLIOS_WITH_PROBLEM_SYMBOL

ORDER BY TOTAL_LOSSES ASC;

-- =================================================================
-- QUERY 3: BROKERAGE INVESTMENT EXPOSURE
-- Top holdings and concentrations by brokerage
-- =================================================================

SELECT 
    s.TIDES_BRKR_NAME as BROKERAGE_NAME,
    i.INV_SYMBOL,
    
    -- Basic exposure
    COUNT(DISTINCT i.CASE_ID) as PORTFOLIOS_HOLDING,
    SUM(i.TIDES_INV_QTY) as TOTAL_QUANTITY,
    SUM(i.UPDT_MRKT_VALUE) as TOTAL_MARKET_VALUE,
    
    -- Brokerage-specific metrics
    ROUND((SUM(i.UPDT_MRKT_VALUE) / brok_totals.BROKERAGE_TOTAL_VALUE) * 100, 2) as PCT_OF_BROKERAGE_ASSETS,
    ROUND(AVG(i.TIDES_INV_QTY), 2) as AVG_QUANTITY_PER_PORTFOLIO,
    MAX(i.TIDES_INV_QTY) as MAX_QUANTITY_IN_SINGLE_PORTFOLIO,
    
    -- Performance impact
    SUM(i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) as TOTAL_DELTA_CONTRIBUTION,
    ROUND(AVG(i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE), 2) as AVG_DELTA_PER_PORTFOLIO,
    
    -- Price analysis
    ROUND(AVG(i.UPDT_CURRENT_PRICE), 4) as AVG_CURRENT_PRICE,
    MIN(i.UPDT_CURRENT_PRICE) as MIN_PRICE,
    MAX(i.UPDT_CURRENT_PRICE) as MAX_PRICE,
    
    -- Risk indicators
    SUM(CASE WHEN (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) < 0 THEN 1 ELSE 0 END) as LOSING_PORTFOLIOS,
    SUM(CASE WHEN (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) > 0 THEN 1 ELSE 0 END) as GAINING_PORTFOLIOS,
    
    ROW_NUMBER() OVER (PARTITION BY s.TIDES_BRKR_NAME ORDER BY SUM(i.UPDT_MRKT_VALUE) DESC) as HOLDING_RANK

FROM WLF_001_BCM_CASE_INVESTMENTS i
INNER JOIN WLF_001_BCM_CASE_SUMMARY s ON i.CASE_ID = s.CASE_ID

-- Get brokerage totals for percentage calculations
CROSS APPLY (
    SELECT SUM(s2.UPDT_TOTAL_MARKET_VALUE) as BROKERAGE_TOTAL_VALUE
    FROM WLF_001_BCM_CASE_SUMMARY s2 
    WHERE s2.TIDES_BRKR_NAME = s.TIDES_BRKR_NAME AND s2.EXEC_ID = @EXEC_ID
) brok_totals

WHERE s.EXEC_ID = @EXEC_ID

GROUP BY s.TIDES_BRKR_NAME, i.INV_SYMBOL, brok_totals.BROKERAGE_TOTAL_VALUE

-- Show top 10 holdings per brokerage
QUALIFY ROW_NUMBER() OVER (PARTITION BY s.TIDES_BRKR_NAME ORDER BY SUM(i.UPDT_MRKT_VALUE) DESC) <= 10

ORDER BY s.TIDES_BRKR_NAME, HOLDING_RANK;
