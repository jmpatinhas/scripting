-- Declare threshold variable
DECLARE @THRESH DECIMAL(10,4) = -0.10; -- 10% loss threshold
DECLARE @EXEC_ID UNIQUEIDENTIFIER = 'YOUR_EXEC_ID_HERE'; -- Replace with actual execution ID

-- Main query for portfolios with losses greater than threshold
SELECT 
    -- Portfolio Identification & Context
    s.TIDES_CASE_ID,
    s.TIDES_BRKR_NAME,
    s.TIDES_STMT_END_DATE,
    s.DELTA,
    ROUND((s.DELTA / NULLIF(s.TIDES_TOTAL_MARKET_VALUE, 0)) * 100, 2) as DELTA_PERCENTAGE,
    
    -- Portfolio Composition & Risk
    ROUND((s.TIDES_CASH_POS / NULLIF(s.UPDT_TOTAL_MARKET_VALUE, 0)) * 100, 2) as CASH_POSITION_PCT,
    
    -- Get largest position info
    largest_pos.LARGEST_POSITION_PCT,
    largest_pos.LARGEST_POSITION_SYMBOL,
    
    CASE WHEN largest_pos.LARGEST_POSITION_PCT > 50 THEN 'YES' ELSE 'NO' END as NON_DIVERSIFIED_FLAG,
    
    -- Loss Analysis
    worst_performer.WORST_PERFORMING_SYMBOL,
    worst_performer.WORST_SYMBOL_IMPACT,
    
    -- Investment counts
    inv_stats.TOTAL_INVESTMENTS_COUNT,
    inv_stats.LOSING_INVESTMENTS_COUNT,
    inv_stats.POSITIVE_POSITIONS_COUNT,
    
    -- Performance Context
    inv_stats.NET_GAINERS_VALUE,
    (inv_stats.NET_GAINERS_VALUE + ABS(inv_stats.NET_LOSERS_VALUE)) as RECOVERY_POTENTIAL,
    
    -- Data Quality Indicators
    inv_stats.FAILED_UPDATES_COUNT,
    CASE WHEN DATEDIFF(day, s.TIDES_STMT_END_DATE, GETDATE()) > 30 THEN 'YES' ELSE 'NO' END as STALE_DATA_FLAG,
    s.STATUS_MESSAGE

FROM WLF_001_BCM_CASE_SUMMARY s

-- Get largest position information
OUTER APPLY (
    SELECT TOP 1
        ROUND((i.UPDT_MRKT_VALUE / NULLIF(s.UPDT_TOTAL_MARKET_VALUE, 0)) * 100, 2) as LARGEST_POSITION_PCT,
        i.INV_SYMBOL as LARGEST_POSITION_SYMBOL
    FROM WLF_001_BCM_CASE_INVESTMENTS i
    WHERE i.CASE_ID = s.CASE_ID
    ORDER BY i.UPDT_MRKT_VALUE DESC
) largest_pos

-- Get worst performing investment
OUTER APPLY (
    SELECT TOP 1
        i.INV_SYMBOL as WORST_PERFORMING_SYMBOL,
        (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) as WORST_SYMBOL_IMPACT
    FROM WLF_001_BCM_CASE_INVESTMENTS i
    WHERE i.CASE_ID = s.CASE_ID
    ORDER BY (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) ASC
) worst_performer

-- Get investment statistics
OUTER APPLY (
    SELECT 
        COUNT(*) as TOTAL_INVESTMENTS_COUNT,
        SUM(CASE WHEN (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) < 0 THEN 1 ELSE 0 END) as LOSING_INVESTMENTS_COUNT,
        SUM(CASE WHEN (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) > 0 THEN 1 ELSE 0 END) as POSITIVE_POSITIONS_COUNT,
        SUM(CASE WHEN (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) > 0 THEN (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) ELSE 0 END) as NET_GAINERS_VALUE,
        SUM(CASE WHEN (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) < 0 THEN (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) ELSE 0 END) as NET_LOSERS_VALUE,
        SUM(CASE WHEN i.STATUS != 'SUCCESS' OR i.UPDT_CURRENT_PRICE IS NULL THEN 1 ELSE 0 END) as FAILED_UPDATES_COUNT
    FROM WLF_001_BCM_CASE_INVESTMENTS i
    WHERE i.CASE_ID = s.CASE_ID
) inv_stats

WHERE s.EXEC_ID = @EXEC_ID
  AND s.DELTA < (@THRESH * s.TIDES_TOTAL_MARKET_VALUE) -- Convert percentage threshold to dollar amount

ORDER BY s.DELTA ASC; -- Worst performers first


-- Companion query: Top 3 losing investments per underperforming portfolio
SELECT 
    s.TIDES_CASE_ID,
    i.INV_SYMBOL,
    i.TIDES_INV_QTY,
    i.TIDES_CURRENT_PRICE,
    i.UPDT_CURRENT_PRICE,
    (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) as INVESTMENT_DELTA,
    ROUND(((i.UPDT_CURRENT_PRICE - i.TIDES_CURRENT_PRICE) / NULLIF(i.TIDES_CURRENT_PRICE, 0)) * 100, 2) as PRICE_CHANGE_PCT,
    ROW_NUMBER() OVER (PARTITION BY s.TIDES_CASE_ID ORDER BY (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) ASC) as LOSS_RANK

FROM WLF_001_BCM_CASE_SUMMARY s
INNER JOIN WLF_001_BCM_CASE_INVESTMENTS i ON s.CASE_ID = i.CASE_ID

WHERE s.EXEC_ID = @EXEC_ID
  AND s.DELTA < (@THRESH * s.TIDES_TOTAL_MARKET_VALUE)
  AND (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) < 0 -- Only losing investments

QUALIFY ROW_NUMBER() OVER (PARTITION BY s.TIDES_CASE_ID ORDER BY (i.UPDT_MRKT_VALUE - i.TIDES_MARKET_VALUE) ASC) <= 3

ORDER BY s.TIDES_CASE_ID, LOSS_RANK;
